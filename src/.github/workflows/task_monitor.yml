import os
import requests
import json
from datetime import datetime, timedelta
import time

class NotionTaskMonitor:
    def __init__(self):
        self.notion_token = os.environ.get('NOTION_TOKEN')
        self.task_db_id = os.environ.get('TASK_DATABASE_ID')
        self.history_db_id = os.environ.get('HISTORY_DATABASE_ID')
        self.headers = {
            'Authorization': f'Bearer {self.notion_token}',
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
        }
    
    def get_recently_completed_tasks(self):
        """最近完了したタスクを取得"""
        url = f'https://api.notion.com/v1/databases/{self.task_db_id}/query'
        
        # 1時間前以降に更新されたアイテムをフィルタ
        one_hour_ago = (datetime.now() - timedelta(hours=1)).isoformat()
        
        payload = {
            "filter": {
                "and": [
                    {
                        "property": "ステータス",
                        "select": {
                            "equals": "完了"  # ここを実際のステータス名に変更
                        }
                    },
                    {
                        "property": "最終編集時刻",
                        "last_edited_time": {
                            "after": one_hour_ago
                        }
                    }
                ]
            }
        }
        
        response = requests.post(url, headers=self.headers, json=payload)
        if response.status_code == 200:
            return response.json()['results']
        else:
            print(f"エラー: {response.status_code} - {response.text}")
            return []
    
    def check_if_already_logged(self, task_id):
        """既に履歴に記録されているかチェック"""
        url = f'https://api.notion.com/v1/databases/{self.history_db_id}/query'
        
        payload = {
            "filter": {
                "property": "タスクID",  # 履歴DBにタスクIDフィールドが必要
                "rich_text": {
                    "equals": task_id
                }
            }
        }
        
        response = requests.post(url, headers=self.headers, json=payload)
        if response.status_code == 200:
            return len(response.json()['results']) > 0
        return False
    
    def create_history_entry(self, task):
        """履歴エントリを作成"""
        url = f'https://api.notion.com/v1/pages'
        
        # タスクの詳細情報を取得
        task_name = ""
        if task['properties']['タスク名']['title']:
            task_name = task['properties']['タスク名']['title'][0]['text']['content']
        
        payload = {
            "parent": {"database_id": self.history_db_id},
            "properties": {
                "タスク名": {
                    "title": [
                        {
                            "text": {
                                "content": task_name
                            }
                        }
                    ]
                },
                "完了日時": {
                    "date": {
                        "start": datetime.now().isoformat()
                    }
                },
                "カテゴリ": {
                    "select": {
                        "name": "広告関連"
                    }
                },
                "タスクID": {
                    "rich_text": [
                        {
                            "text": {
                                "content": task['id']
                            }
                        }
                    ]
                },
                "詳細": {
                    "rich_text": [
                        {
                            "text": {
                                "content": "タスク完了により自動記録"
                            }
                        }
                    ]
                }
            }
        }
        
        response = requests.post(url, headers=self.headers, json=payload)
        if response.status_code == 200:
            print(f"履歴記録成功: {task_name}")
            return True
        else:
            print(f"履歴記録失敗: {response.status_code} - {response.text}")
            return False
    
    def run(self):
        """メイン処理実行"""
        print("タスク監視を開始...")
        
        # 必要な環境変数チェック
        if not all([self.notion_token, self.task_db_id, self.history_db_id]):
            print("エラー: 必要な環境変数が設定されていません")
            return
        
        # 完了タスクを取得
        completed_tasks = self.get_recently_completed_tasks()
        print(f"完了タスク {len(completed_tasks)} 件を発見")
        
        # 各タスクを処理
        for task in completed_tasks:
            task_id = task['id']
            
            # 既に履歴に記録済みかチェック
            if not self.check_if_already_logged(task_id):
                # 履歴エントリを作成
                self.create_history_entry(task)
                time.sleep(1)  # API制限対策
            else:
                print(f"既に記録済み: {task_id}")
        
        print("タスク監視完了")

if __name__ == "__main__":
    monitor = NotionTaskMonitor()
    monitor.run()
